<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 공통으로 사용하는 자원 설정 -->
	
	<!--  H2 dateSource --> 
	<jdbc:embedded-database id="dataSource" type="H2">
    	<jdbc:script location="classpath:ddl/schema.sql" />
    	<jdbc:script location="classpath:ddl/data.sql" />
  	</jdbc:embedded-database>

    <!-- mybatis SqlSessionFactory -->
    <!-- DB와의 연결과 SQL의 실행에 대한 모든 것을 가진 객체, mybatis 설정, mybatis-spring 모듈 사용 -->
    <!-- classpath는 기본 경로가 src/main/java 또는 src/main/resources -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
        <property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
    </bean>
    
    <!-- mybatis SqlSessionTemplate -->
    <!-- 기본적인 트랜잭션 관리나 스레드 처리의 안정성을 보장하고, DB의 연결과 종료를 관리하는 부분 -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
    </bean>

    <!-- mapper -->
    <mybatis-spring:scan base-package="com.myapp.mapper"/>
    
	<!-- aop -->
	<bean id='loggerAspect1' class='com.myapp.aop.LoggerAspect'/>
	
	<aop:config>
		<aop:aspect id='log' ref='loggerAspect1'>
			<aop:pointcut id="point1" expression="execution(* com.myapp.service.*Impl.*(..)) or execution(* com.myapp.mapper.*Mapper.*(..))"/>
            		<!-- before -->
            		<aop:before method="printLog" pointcut-ref="point1"/>
		</aop:aspect>
	</aop:config>
	      
    <!-- transaction -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- transaction aop -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" rollback-for="Exception" />
			<tx:method name="update*" rollback-for="Exception" />
			<tx:method name="delete*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="transactionPointcut" 
				expression="within(com.myapp.mapper..*)" />
		
		<aop:advisor id="transactionAdvisor" 
				pointcut-ref="transactionPointcut" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- bean 등록 -->
    <context:component-scan base-package="com.myapp.service"/>

</beans>
